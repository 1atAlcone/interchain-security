syntax = "proto3";
package interchain_security.ccv.provider.v1;

option go_package = "github.com/cosmos/interchain-security/x/ccv/provider/types";

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";
import "ibc/lightclients/tendermint/v1/tendermint.proto";
import "tendermint/types/evidence.proto";

// Msg defines the Msg service.
service Msg {
  rpc AssignConsumerKey(MsgAssignConsumerKey) returns (MsgAssignConsumerKeyResponse);
  rpc SubmitConsumerMisbehaviour(MsgSubmitConsumerMisbehaviour) returns (MsgSubmitConsumerMisbehaviourResponse);
  rpc SubmitConsumerDoubleVoting(MsgSubmitConsumerDoubleVoting) returns (MsgSubmitConsumerDoubleVotingResponse);
}

message MsgAssignConsumerKey {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  // The chain id of the consumer chain to assign a consensus public key to
  string chain_id = 1;
  // The validator address on the provider
  string provider_addr = 2
      [ (gogoproto.moretags) = "yaml:\"address\"" ];
  // The consensus public key to use on the consumer
  google.protobuf.Any consumer_key = 3
      [ (cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey" ];
}

message MsgAssignConsumerKeyResponse {}


// MsgSubmitConsumerMisbehaviour defines a message that reports a misbehaviour
// observed on a consumer chain
message MsgSubmitConsumerMisbehaviour {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string submitter = 1;
  // The Misbehaviour of the consumer chain wrapping 
  // two conflicting IBC headers 
  ibc.lightclients.tendermint.v1.Misbehaviour misbehaviour = 2;
}

message MsgSubmitConsumerMisbehaviourResponse {}

// MsgSubmitConsumerDoubleVoting defines a message that reports a equivocation
// observed on a consumer chain
message MsgSubmitConsumerDoubleVoting {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string submitter = 1;
  // The Equivocation of the consumer chain wrapping 
  // an evidence of a validator signed two conflicting votes
  tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 2;
}

message MsgSubmitConsumerDoubleVotingResponse {}