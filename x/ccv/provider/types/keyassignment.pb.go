// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_security/ccv/provider/v1/keyassignment.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	crypto "github.com/tendermint/tendermint/proto/tendermint/crypto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidatorPower struct {
	ConsumerKey *crypto.PublicKey `protobuf:"bytes,1,opt,name=consumer_key,json=consumerKey,proto3" json:"consumer_key,omitempty"`
	Power       int64             `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *ValidatorPower) Reset()         { *m = ValidatorPower{} }
func (m *ValidatorPower) String() string { return proto.CompactTextString(m) }
func (*ValidatorPower) ProtoMessage()    {}
func (*ValidatorPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36beb32b6cd555b, []int{0}
}
func (m *ValidatorPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorPower.Merge(m, src)
}
func (m *ValidatorPower) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorPower) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorPower.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorPower proto.InternalMessageInfo

func (m *ValidatorPower) GetConsumerKey() *crypto.PublicKey {
	if m != nil {
		return m.ConsumerKey
	}
	return nil
}

func (m *ValidatorPower) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

type AddrList struct {
	Addrs [][]byte `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (m *AddrList) Reset()         { *m = AddrList{} }
func (m *AddrList) String() string { return proto.CompactTextString(m) }
func (*AddrList) ProtoMessage()    {}
func (*AddrList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36beb32b6cd555b, []int{1}
}
func (m *AddrList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddrList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddrList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddrList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddrList.Merge(m, src)
}
func (m *AddrList) XXX_Size() int {
	return m.Size()
}
func (m *AddrList) XXX_DiscardUnknown() {
	xxx_messageInfo_AddrList.DiscardUnknown(m)
}

var xxx_messageInfo_AddrList proto.InternalMessageInfo

func (m *AddrList) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type ConsumerKeyRecord struct {
	ChainId      string            `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ProviderAddr []byte            `protobuf:"bytes,2,opt,name=provider_addr,json=providerAddr,proto3" json:"provider_addr,omitempty"`
	ConsumerKey  *crypto.PublicKey `protobuf:"bytes,3,opt,name=consumer_key,json=consumerKey,proto3" json:"consumer_key,omitempty"`
}

func (m *ConsumerKeyRecord) Reset()         { *m = ConsumerKeyRecord{} }
func (m *ConsumerKeyRecord) String() string { return proto.CompactTextString(m) }
func (*ConsumerKeyRecord) ProtoMessage()    {}
func (*ConsumerKeyRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36beb32b6cd555b, []int{2}
}
func (m *ConsumerKeyRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerKeyRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerKeyRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerKeyRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerKeyRecord.Merge(m, src)
}
func (m *ConsumerKeyRecord) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerKeyRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerKeyRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerKeyRecord proto.InternalMessageInfo

func (m *ConsumerKeyRecord) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ConsumerKeyRecord) GetProviderAddr() []byte {
	if m != nil {
		return m.ProviderAddr
	}
	return nil
}

func (m *ConsumerKeyRecord) GetConsumerKey() *crypto.PublicKey {
	if m != nil {
		return m.ConsumerKey
	}
	return nil
}

type ValidatorByConsumerAddrRecord struct {
	ChainId      string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ConsumerAddr []byte `protobuf:"bytes,2,opt,name=consumer_addr,json=consumerAddr,proto3" json:"consumer_addr,omitempty"`
	ProviderAddr []byte `protobuf:"bytes,3,opt,name=provider_addr,json=providerAddr,proto3" json:"provider_addr,omitempty"`
}

func (m *ValidatorByConsumerAddrRecord) Reset()         { *m = ValidatorByConsumerAddrRecord{} }
func (m *ValidatorByConsumerAddrRecord) String() string { return proto.CompactTextString(m) }
func (*ValidatorByConsumerAddrRecord) ProtoMessage()    {}
func (*ValidatorByConsumerAddrRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36beb32b6cd555b, []int{3}
}
func (m *ValidatorByConsumerAddrRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorByConsumerAddrRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorByConsumerAddrRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorByConsumerAddrRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorByConsumerAddrRecord.Merge(m, src)
}
func (m *ValidatorByConsumerAddrRecord) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorByConsumerAddrRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorByConsumerAddrRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorByConsumerAddrRecord proto.InternalMessageInfo

func (m *ValidatorByConsumerAddrRecord) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ValidatorByConsumerAddrRecord) GetConsumerAddr() []byte {
	if m != nil {
		return m.ConsumerAddr
	}
	return nil
}

func (m *ValidatorByConsumerAddrRecord) GetProviderAddr() []byte {
	if m != nil {
		return m.ProviderAddr
	}
	return nil
}

type ConsumerAddrsToPruneRecord struct {
	ChainId string   `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	VscId   uint64   `protobuf:"varint,2,opt,name=vsc_id,json=vscId,proto3" json:"vsc_id,omitempty"`
	Addrs   [][]byte `protobuf:"bytes,3,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (m *ConsumerAddrsToPruneRecord) Reset()         { *m = ConsumerAddrsToPruneRecord{} }
func (m *ConsumerAddrsToPruneRecord) String() string { return proto.CompactTextString(m) }
func (*ConsumerAddrsToPruneRecord) ProtoMessage()    {}
func (*ConsumerAddrsToPruneRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36beb32b6cd555b, []int{4}
}
func (m *ConsumerAddrsToPruneRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerAddrsToPruneRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerAddrsToPruneRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerAddrsToPruneRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerAddrsToPruneRecord.Merge(m, src)
}
func (m *ConsumerAddrsToPruneRecord) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerAddrsToPruneRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerAddrsToPruneRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerAddrsToPruneRecord proto.InternalMessageInfo

func (m *ConsumerAddrsToPruneRecord) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ConsumerAddrsToPruneRecord) GetVscId() uint64 {
	if m != nil {
		return m.VscId
	}
	return 0
}

func (m *ConsumerAddrsToPruneRecord) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type KeyAssignment struct {
	ConsumerKeys             []*ConsumerKeyRecord             `protobuf:"bytes,1,rep,name=consumer_keys,json=consumerKeys,proto3" json:"consumer_keys,omitempty"`
	ValidatorsByConsumerAddr []*ValidatorByConsumerAddrRecord `protobuf:"bytes,2,rep,name=validators_by_consumer_addr,json=validatorsByConsumerAddr,proto3" json:"validators_by_consumer_addr,omitempty"`
	ConsumerAddrsToPrune     []*ConsumerAddrsToPruneRecord    `protobuf:"bytes,4,rep,name=consumer_addrs_to_prune,json=consumerAddrsToPrune,proto3" json:"consumer_addrs_to_prune,omitempty"`
}

func (m *KeyAssignment) Reset()         { *m = KeyAssignment{} }
func (m *KeyAssignment) String() string { return proto.CompactTextString(m) }
func (*KeyAssignment) ProtoMessage()    {}
func (*KeyAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36beb32b6cd555b, []int{5}
}
func (m *KeyAssignment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyAssignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyAssignment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyAssignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyAssignment.Merge(m, src)
}
func (m *KeyAssignment) XXX_Size() int {
	return m.Size()
}
func (m *KeyAssignment) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyAssignment.DiscardUnknown(m)
}

var xxx_messageInfo_KeyAssignment proto.InternalMessageInfo

func (m *KeyAssignment) GetConsumerKeys() []*ConsumerKeyRecord {
	if m != nil {
		return m.ConsumerKeys
	}
	return nil
}

func (m *KeyAssignment) GetValidatorsByConsumerAddr() []*ValidatorByConsumerAddrRecord {
	if m != nil {
		return m.ValidatorsByConsumerAddr
	}
	return nil
}

func (m *KeyAssignment) GetConsumerAddrsToPrune() []*ConsumerAddrsToPruneRecord {
	if m != nil {
		return m.ConsumerAddrsToPrune
	}
	return nil
}

func init() {
	proto.RegisterType((*ValidatorPower)(nil), "interchain_security.ccv.provider.v1.ValidatorPower")
	proto.RegisterType((*AddrList)(nil), "interchain_security.ccv.provider.v1.AddrList")
	proto.RegisterType((*ConsumerKeyRecord)(nil), "interchain_security.ccv.provider.v1.ConsumerKeyRecord")
	proto.RegisterType((*ValidatorByConsumerAddrRecord)(nil), "interchain_security.ccv.provider.v1.ValidatorByConsumerAddrRecord")
	proto.RegisterType((*ConsumerAddrsToPruneRecord)(nil), "interchain_security.ccv.provider.v1.ConsumerAddrsToPruneRecord")
	proto.RegisterType((*KeyAssignment)(nil), "interchain_security.ccv.provider.v1.KeyAssignment")
}

func init() {
	proto.RegisterFile("interchain_security/ccv/provider/v1/keyassignment.proto", fileDescriptor_d36beb32b6cd555b)
}

var fileDescriptor_d36beb32b6cd555b = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0xd3, 0x3c,
	0x18, 0xaf, 0x97, 0x6d, 0xef, 0x5e, 0xb7, 0x43, 0x22, 0x2a, 0x22, 0x94, 0x11, 0x55, 0xd9, 0xa5,
	0x17, 0x1c, 0x6d, 0x48, 0x20, 0x71, 0x99, 0x56, 0x4e, 0x53, 0x39, 0x54, 0xd1, 0xc4, 0x01, 0x0e,
	0x51, 0x6a, 0x5b, 0x99, 0xb5, 0x25, 0x8e, 0x6c, 0x27, 0xe0, 0x23, 0x12, 0x1f, 0x80, 0x03, 0x1f,
	0x8a, 0xe3, 0x8e, 0x1c, 0x51, 0x7b, 0xe1, 0x63, 0x20, 0x27, 0x4a, 0x93, 0x92, 0x09, 0xba, 0x5b,
	0xdd, 0xc7, 0xcf, 0xef, 0xcf, 0xf3, 0x7b, 0x62, 0xf8, 0x8a, 0xa5, 0x8a, 0x0a, 0x7c, 0x15, 0xb1,
	0x34, 0x94, 0x14, 0xe7, 0x82, 0x29, 0xed, 0x63, 0x5c, 0xf8, 0x99, 0xe0, 0x05, 0x23, 0x54, 0xf8,
	0xc5, 0x89, 0x7f, 0x4d, 0x75, 0x24, 0x25, 0x8b, 0xd3, 0x84, 0xa6, 0x0a, 0x65, 0x82, 0x2b, 0x6e,
	0x1f, 0xdf, 0xd1, 0x88, 0x30, 0x2e, 0x50, 0xdd, 0x88, 0x8a, 0x93, 0xd1, 0x30, 0xe6, 0x31, 0x2f,
	0xef, 0xfb, 0xe6, 0x57, 0xd5, 0x3a, 0x3a, 0x52, 0x34, 0x25, 0x54, 0x24, 0x2c, 0x55, 0x3e, 0x16,
	0x3a, 0x53, 0xdc, 0x30, 0xc8, 0xaa, 0xea, 0xc5, 0xf0, 0xc1, 0xbb, 0xe8, 0x86, 0x91, 0x48, 0x71,
	0x31, 0xe7, 0x1f, 0xa9, 0xb0, 0xcf, 0xe0, 0x00, 0xf3, 0x54, 0xe6, 0x09, 0x15, 0xe1, 0x35, 0xd5,
	0x0e, 0x18, 0x83, 0x49, 0xff, 0xf4, 0x08, 0x35, 0x30, 0xa8, 0x82, 0x41, 0xf3, 0x7c, 0x71, 0xc3,
	0xf0, 0x8c, 0xea, 0xa0, 0x5f, 0x77, 0xcc, 0xa8, 0xb6, 0x87, 0x70, 0x2f, 0x33, 0x48, 0xce, 0xce,
	0x18, 0x4c, 0xac, 0xa0, 0x3a, 0x78, 0x63, 0x78, 0x70, 0x4e, 0x88, 0x78, 0xcb, 0xa4, 0x32, 0x37,
	0x22, 0x42, 0x84, 0x74, 0xc0, 0xd8, 0x9a, 0x0c, 0x82, 0xea, 0xe0, 0x7d, 0x03, 0xf0, 0xe1, 0x9b,
	0x06, 0x27, 0xa0, 0x98, 0x0b, 0x62, 0x3f, 0x81, 0x07, 0x95, 0x6d, 0x46, 0x4a, 0x29, 0xff, 0x07,
	0xff, 0x95, 0xe7, 0x0b, 0x62, 0x1f, 0xc3, 0xc3, 0xda, 0x7e, 0x68, 0x20, 0x4a, 0xc2, 0x41, 0x30,
	0xa8, 0xff, 0x34, 0x7c, 0x1d, 0x3b, 0xd6, 0x3d, 0xed, 0x78, 0x5f, 0x00, 0x7c, 0xb6, 0x1e, 0xd1,
	0x54, 0xd7, 0x0a, 0x0d, 0xf8, 0x56, 0x12, 0xd7, 0xec, 0x6d, 0x89, 0xb8, 0x85, 0xd2, 0xf5, 0x61,
	0x75, 0x7d, 0x78, 0x04, 0x8e, 0xda, 0xd4, 0xf2, 0x92, 0xcf, 0x45, 0x9e, 0xd2, 0x7f, 0x4b, 0x78,
	0x04, 0xf7, 0x0b, 0x89, 0x4d, 0xc1, 0x70, 0xef, 0x06, 0x7b, 0x85, 0xc4, 0x17, 0xa4, 0xc9, 0xc0,
	0x6a, 0x67, 0xf0, 0x6b, 0x07, 0x1e, 0xce, 0xa8, 0x3e, 0x5f, 0xef, 0x9f, 0xfd, 0xa1, 0xe5, 0xc0,
	0xec, 0x4d, 0x99, 0x59, 0xff, 0xf4, 0x25, 0xda, 0x62, 0x23, 0x51, 0x27, 0xce, 0xc6, 0xf9, 0x8c,
	0x6a, 0x69, 0x7f, 0x06, 0xf0, 0x69, 0x51, 0xcf, 0x56, 0x86, 0x0b, 0x1d, 0xfe, 0x39, 0x2d, 0xc3,
	0x35, 0xdd, 0x8a, 0xeb, 0xaf, 0x19, 0x05, 0x4e, 0x43, 0xb3, 0x59, 0xb7, 0x0b, 0xf8, 0x78, 0x83,
	0x54, 0x86, 0x8a, 0x87, 0x99, 0x99, 0xad, 0xb3, 0x5b, 0xd2, 0x9f, 0xdd, 0xcb, 0x6a, 0x37, 0x9c,
	0x60, 0x88, 0xef, 0xa8, 0x4d, 0x2f, 0xbf, 0x2f, 0x5d, 0x70, 0xbb, 0x74, 0xc1, 0xcf, 0xa5, 0x0b,
	0xbe, 0xae, 0xdc, 0xde, 0xed, 0xca, 0xed, 0xfd, 0x58, 0xb9, 0xbd, 0xf7, 0xaf, 0x63, 0xa6, 0xae,
	0xf2, 0x05, 0xc2, 0x3c, 0xf1, 0x31, 0x97, 0x09, 0x97, 0x7e, 0xa3, 0xe0, 0xf9, 0xfa, 0xdd, 0xf8,
	0xb4, 0xf9, 0x72, 0x28, 0x9d, 0x51, 0xb9, 0xd8, 0x2f, 0x3f, 0xeb, 0x17, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xe9, 0x48, 0x99, 0x31, 0x6a, 0x04, 0x00, 0x00,
}

func (m *ValidatorPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintKeyassignment(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if m.ConsumerKey != nil {
		{
			size, err := m.ConsumerKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeyassignment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddrList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddrList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddrList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintKeyassignment(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerKeyRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerKeyRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerKeyRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsumerKey != nil {
		{
			size, err := m.ConsumerKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeyassignment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProviderAddr) > 0 {
		i -= len(m.ProviderAddr)
		copy(dAtA[i:], m.ProviderAddr)
		i = encodeVarintKeyassignment(dAtA, i, uint64(len(m.ProviderAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintKeyassignment(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorByConsumerAddrRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorByConsumerAddrRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorByConsumerAddrRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProviderAddr) > 0 {
		i -= len(m.ProviderAddr)
		copy(dAtA[i:], m.ProviderAddr)
		i = encodeVarintKeyassignment(dAtA, i, uint64(len(m.ProviderAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConsumerAddr) > 0 {
		i -= len(m.ConsumerAddr)
		copy(dAtA[i:], m.ConsumerAddr)
		i = encodeVarintKeyassignment(dAtA, i, uint64(len(m.ConsumerAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintKeyassignment(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerAddrsToPruneRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerAddrsToPruneRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerAddrsToPruneRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintKeyassignment(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.VscId != 0 {
		i = encodeVarintKeyassignment(dAtA, i, uint64(m.VscId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintKeyassignment(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyAssignment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyAssignment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyAssignment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerAddrsToPrune) > 0 {
		for iNdEx := len(m.ConsumerAddrsToPrune) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConsumerAddrsToPrune[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeyassignment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ValidatorsByConsumerAddr) > 0 {
		for iNdEx := len(m.ValidatorsByConsumerAddr) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorsByConsumerAddr[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeyassignment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ConsumerKeys) > 0 {
		for iNdEx := len(m.ConsumerKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConsumerKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeyassignment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeyassignment(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeyassignment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConsumerKey != nil {
		l = m.ConsumerKey.Size()
		n += 1 + l + sovKeyassignment(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovKeyassignment(uint64(m.Power))
	}
	return n
}

func (m *AddrList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, b := range m.Addrs {
			l = len(b)
			n += 1 + l + sovKeyassignment(uint64(l))
		}
	}
	return n
}

func (m *ConsumerKeyRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovKeyassignment(uint64(l))
	}
	l = len(m.ProviderAddr)
	if l > 0 {
		n += 1 + l + sovKeyassignment(uint64(l))
	}
	if m.ConsumerKey != nil {
		l = m.ConsumerKey.Size()
		n += 1 + l + sovKeyassignment(uint64(l))
	}
	return n
}

func (m *ValidatorByConsumerAddrRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovKeyassignment(uint64(l))
	}
	l = len(m.ConsumerAddr)
	if l > 0 {
		n += 1 + l + sovKeyassignment(uint64(l))
	}
	l = len(m.ProviderAddr)
	if l > 0 {
		n += 1 + l + sovKeyassignment(uint64(l))
	}
	return n
}

func (m *ConsumerAddrsToPruneRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovKeyassignment(uint64(l))
	}
	if m.VscId != 0 {
		n += 1 + sovKeyassignment(uint64(m.VscId))
	}
	if len(m.Addrs) > 0 {
		for _, b := range m.Addrs {
			l = len(b)
			n += 1 + l + sovKeyassignment(uint64(l))
		}
	}
	return n
}

func (m *KeyAssignment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConsumerKeys) > 0 {
		for _, e := range m.ConsumerKeys {
			l = e.Size()
			n += 1 + l + sovKeyassignment(uint64(l))
		}
	}
	if len(m.ValidatorsByConsumerAddr) > 0 {
		for _, e := range m.ValidatorsByConsumerAddr {
			l = e.Size()
			n += 1 + l + sovKeyassignment(uint64(l))
		}
	}
	if len(m.ConsumerAddrsToPrune) > 0 {
		for _, e := range m.ConsumerAddrsToPrune {
			l = e.Size()
			n += 1 + l + sovKeyassignment(uint64(l))
		}
	}
	return n
}

func sovKeyassignment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeyassignment(x uint64) (n int) {
	return sovKeyassignment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyassignment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyassignment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsumerKey == nil {
				m.ConsumerKey = &crypto.PublicKey{}
			}
			if err := m.ConsumerKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeyassignment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddrList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyassignment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddrList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddrList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyassignment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, make([]byte, postIndex-iNdEx))
			copy(m.Addrs[len(m.Addrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyassignment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerKeyRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyassignment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerKeyRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerKeyRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyassignment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyassignment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddr = append(m.ProviderAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ProviderAddr == nil {
				m.ProviderAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyassignment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsumerKey == nil {
				m.ConsumerKey = &crypto.PublicKey{}
			}
			if err := m.ConsumerKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyassignment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorByConsumerAddrRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyassignment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorByConsumerAddrRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorByConsumerAddrRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyassignment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyassignment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerAddr = append(m.ConsumerAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ConsumerAddr == nil {
				m.ConsumerAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyassignment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddr = append(m.ProviderAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ProviderAddr == nil {
				m.ProviderAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyassignment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerAddrsToPruneRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyassignment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerAddrsToPruneRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerAddrsToPruneRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyassignment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VscId", wireType)
			}
			m.VscId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VscId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyassignment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, make([]byte, postIndex-iNdEx))
			copy(m.Addrs[len(m.Addrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyassignment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyAssignment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyassignment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyAssignment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyAssignment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyassignment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerKeys = append(m.ConsumerKeys, &ConsumerKeyRecord{})
			if err := m.ConsumerKeys[len(m.ConsumerKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsByConsumerAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyassignment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorsByConsumerAddr = append(m.ValidatorsByConsumerAddr, &ValidatorByConsumerAddrRecord{})
			if err := m.ValidatorsByConsumerAddr[len(m.ValidatorsByConsumerAddr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerAddrsToPrune", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyassignment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerAddrsToPrune = append(m.ConsumerAddrsToPrune, &ConsumerAddrsToPruneRecord{})
			if err := m.ConsumerAddrsToPrune[len(m.ConsumerAddrsToPrune)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyassignment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyassignment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeyassignment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeyassignment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeyassignment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeyassignment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeyassignment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeyassignment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeyassignment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeyassignment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeyassignment = fmt.Errorf("proto: unexpected end of group")
)
