// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_security/ccv/provider/v1/genesis.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/interchain-security/x/ccv/consumer/types"
	types "github.com/cosmos/interchain-security/x/ccv/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the CCV provider chain genesis state
type GenesisState struct {
	ValsetUpdateId uint64 `protobuf:"varint,1,opt,name=valset_update_id,json=valsetUpdateId,proto3" json:"valset_update_id,omitempty"`
	// ConsumerState defines the state that the provider chain stores for each
	ConsumerStates []ConsumerState `protobuf:"bytes,2,rep,name=consumer_states,json=consumerStates,proto3" json:"consumer_states" yaml:"consumer_states"`
	// UnbondingOp : vscID -> []chainID
	UnbondingOps []types.UnbondingOp `protobuf:"bytes,3,rep,name=unbonding_ops,json=unbondingOps,proto3" json:"unbonding_ops"`
	// ValsetBlockHeight
	ValsetUpdateIdToHeight       []ValsetUpdateIdToHeight      `protobuf:"bytes,4,rep,name=valset_update_id_to_height,json=valsetUpdateIdToHeight,proto3" json:"valset_update_id_to_height"`
	CreateConsumerChainProposals []CreateConsumerChainProposal `protobuf:"bytes,5,rep,name=create_consumer_chain_proposals,json=createConsumerChainProposals,proto3" json:"create_consumer_chain_proposals"`
	StopConsumerChainProposals   []StopConsumerChainProposal   `protobuf:"bytes,6,rep,name=stop_consumer_chain_proposals,json=stopConsumerChainProposals,proto3" json:"stop_consumer_chain_proposals"`
	Params                       Params                        `protobuf:"bytes,7,opt,name=params,proto3" json:"params"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_48411d9c7900d48e, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetValsetUpdateId() uint64 {
	if m != nil {
		return m.ValsetUpdateId
	}
	return 0
}

func (m *GenesisState) GetConsumerStates() []ConsumerState {
	if m != nil {
		return m.ConsumerStates
	}
	return nil
}

func (m *GenesisState) GetUnbondingOps() []types.UnbondingOp {
	if m != nil {
		return m.UnbondingOps
	}
	return nil
}

func (m *GenesisState) GetValsetUpdateIdToHeight() []ValsetUpdateIdToHeight {
	if m != nil {
		return m.ValsetUpdateIdToHeight
	}
	return nil
}

func (m *GenesisState) GetCreateConsumerChainProposals() []CreateConsumerChainProposal {
	if m != nil {
		return m.CreateConsumerChainProposals
	}
	return nil
}

func (m *GenesisState) GetStopConsumerChainProposals() []StopConsumerChainProposal {
	if m != nil {
		return m.StopConsumerChainProposals
	}
	return nil
}

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// consumer chain
type ConsumerState struct {
	ChainId                string                               `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ChannelId              string                               `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ClientId               string                               `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	InitialHeight          uint64                               `protobuf:"varint,4,opt,name=initial_height,json=initialHeight,proto3" json:"initial_height,omitempty"`
	LockUnbondingOnTimeout bool                                 `protobuf:"varint,5,opt,name=lock_unbonding_on_timeout,json=lockUnbondingOnTimeout,proto3" json:"lock_unbonding_on_timeout,omitempty"`
	ConsumerGenesis        types1.GenesisState                  `protobuf:"bytes,6,opt,name=consumer_genesis,json=consumerGenesis,proto3" json:"consumer_genesis"`
	PendingValsetChanges   []types.ValidatorSetChangePacketData `protobuf:"bytes,7,rep,name=pending_valset_changes,json=pendingValsetChanges,proto3" json:"pending_valset_changes"`
	SlashDowntimeAck       []string                             `protobuf:"bytes,8,rep,name=slash_downtime_ack,json=slashDowntimeAck,proto3" json:"slash_downtime_ack,omitempty"`
	// UnbondingOpIndex :  | chainID | vscID | -> UbdIndex
	UnbondingOpsIndex []UnbondingOpIndex `protobuf:"bytes,9,rep,name=unbonding_ops_index,json=unbondingOpsIndex,proto3" json:"unbonding_ops_index"`
}

func (m *ConsumerState) Reset()         { *m = ConsumerState{} }
func (m *ConsumerState) String() string { return proto.CompactTextString(m) }
func (*ConsumerState) ProtoMessage()    {}
func (*ConsumerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_48411d9c7900d48e, []int{1}
}
func (m *ConsumerState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerState.Merge(m, src)
}
func (m *ConsumerState) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerState) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerState.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerState proto.InternalMessageInfo

func (m *ConsumerState) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ConsumerState) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ConsumerState) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ConsumerState) GetInitialHeight() uint64 {
	if m != nil {
		return m.InitialHeight
	}
	return 0
}

func (m *ConsumerState) GetLockUnbondingOnTimeout() bool {
	if m != nil {
		return m.LockUnbondingOnTimeout
	}
	return false
}

func (m *ConsumerState) GetConsumerGenesis() types1.GenesisState {
	if m != nil {
		return m.ConsumerGenesis
	}
	return types1.GenesisState{}
}

func (m *ConsumerState) GetPendingValsetChanges() []types.ValidatorSetChangePacketData {
	if m != nil {
		return m.PendingValsetChanges
	}
	return nil
}

func (m *ConsumerState) GetSlashDowntimeAck() []string {
	if m != nil {
		return m.SlashDowntimeAck
	}
	return nil
}

func (m *ConsumerState) GetUnbondingOpsIndex() []UnbondingOpIndex {
	if m != nil {
		return m.UnbondingOpsIndex
	}
	return nil
}

// UnbondingOpIndex defines the genesis information for each unbonding operations index
// indexed by chain id and valset udpate id
type UnbondingOpIndex struct {
	ValsetUpdateId   uint64   `protobuf:"varint,1,opt,name=valset_update_id,json=valsetUpdateId,proto3" json:"valset_update_id,omitempty"`
	UnbondingOpIndex []uint64 `protobuf:"varint,2,rep,packed,name=unbonding_op_index,json=unbondingOpIndex,proto3" json:"unbonding_op_index,omitempty"`
}

func (m *UnbondingOpIndex) Reset()         { *m = UnbondingOpIndex{} }
func (m *UnbondingOpIndex) String() string { return proto.CompactTextString(m) }
func (*UnbondingOpIndex) ProtoMessage()    {}
func (*UnbondingOpIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_48411d9c7900d48e, []int{2}
}
func (m *UnbondingOpIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingOpIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingOpIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingOpIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingOpIndex.Merge(m, src)
}
func (m *UnbondingOpIndex) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingOpIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingOpIndex.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingOpIndex proto.InternalMessageInfo

func (m *UnbondingOpIndex) GetValsetUpdateId() uint64 {
	if m != nil {
		return m.ValsetUpdateId
	}
	return 0
}

func (m *UnbondingOpIndex) GetUnbondingOpIndex() []uint64 {
	if m != nil {
		return m.UnbondingOpIndex
	}
	return nil
}

// ValsetUpdateIdToHeight defines the genesis information for each valset udpate id to
// block height mapping.
type ValsetUpdateIdToHeight struct {
	ValsetUpdateId uint64 `protobuf:"varint,1,opt,name=valset_update_id,json=valsetUpdateId,proto3" json:"valset_update_id,omitempty"`
	Height         uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *ValsetUpdateIdToHeight) Reset()         { *m = ValsetUpdateIdToHeight{} }
func (m *ValsetUpdateIdToHeight) String() string { return proto.CompactTextString(m) }
func (*ValsetUpdateIdToHeight) ProtoMessage()    {}
func (*ValsetUpdateIdToHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_48411d9c7900d48e, []int{3}
}
func (m *ValsetUpdateIdToHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValsetUpdateIdToHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValsetUpdateIdToHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValsetUpdateIdToHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValsetUpdateIdToHeight.Merge(m, src)
}
func (m *ValsetUpdateIdToHeight) XXX_Size() int {
	return m.Size()
}
func (m *ValsetUpdateIdToHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_ValsetUpdateIdToHeight.DiscardUnknown(m)
}

var xxx_messageInfo_ValsetUpdateIdToHeight proto.InternalMessageInfo

func (m *ValsetUpdateIdToHeight) GetValsetUpdateId() uint64 {
	if m != nil {
		return m.ValsetUpdateId
	}
	return 0
}

func (m *ValsetUpdateIdToHeight) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "interchain_security.ccv.provider.v1.GenesisState")
	proto.RegisterType((*ConsumerState)(nil), "interchain_security.ccv.provider.v1.ConsumerState")
	proto.RegisterType((*UnbondingOpIndex)(nil), "interchain_security.ccv.provider.v1.UnbondingOpIndex")
	proto.RegisterType((*ValsetUpdateIdToHeight)(nil), "interchain_security.ccv.provider.v1.ValsetUpdateIdToHeight")
}

func init() {
	proto.RegisterFile("interchain_security/ccv/provider/v1/genesis.proto", fileDescriptor_48411d9c7900d48e)
}

var fileDescriptor_48411d9c7900d48e = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x16, 0x2d, 0x59, 0x96, 0xd6, 0x8f, 0xaa, 0x5b, 0x43, 0xa0, 0xd5, 0x5a, 0x16, 0xd4, 0x16,
	0x15, 0x50, 0x97, 0x04, 0x55, 0x14, 0x68, 0x5d, 0x20, 0x48, 0x6c, 0x03, 0x89, 0x4e, 0x31, 0xe8,
	0xc7, 0xc1, 0x17, 0x62, 0xb5, 0x5c, 0x48, 0x1b, 0x51, 0x5c, 0x82, 0xbb, 0x64, 0x6c, 0x04, 0x39,
	0xe7, 0x14, 0x20, 0x7f, 0x28, 0x77, 0x1f, 0x7d, 0xcc, 0xc9, 0x08, 0xec, 0x73, 0x2e, 0xf9, 0x05,
	0x01, 0x97, 0xab, 0x27, 0x2c, 0x87, 0xbe, 0x91, 0x33, 0xf3, 0xcd, 0xf7, 0xed, 0xec, 0xcc, 0x2c,
	0xb0, 0xa8, 0x2f, 0x48, 0x88, 0xfb, 0x88, 0xfa, 0x0e, 0x27, 0x38, 0x0a, 0xa9, 0xb8, 0x34, 0x31,
	0x8e, 0xcd, 0x20, 0x64, 0x31, 0x75, 0x49, 0x68, 0xc6, 0x96, 0xd9, 0x23, 0x3e, 0xe1, 0x94, 0x1b,
	0x41, 0xc8, 0x04, 0x83, 0xbf, 0xde, 0x03, 0x31, 0x30, 0x8e, 0x8d, 0x11, 0xc4, 0x88, 0xad, 0xda,
	0x66, 0x8f, 0xf5, 0x98, 0x8c, 0x37, 0x93, 0xaf, 0x14, 0x5a, 0xfb, 0x6d, 0x11, 0x5b, 0x6c, 0x99,
	0x2a, 0x83, 0x60, 0xb5, 0x76, 0x16, 0x4d, 0x63, 0xb2, 0xef, 0x60, 0x30, 0xf3, 0x79, 0x34, 0x4c,
	0x31, 0xa3, 0x6f, 0x85, 0xb1, 0xb2, 0x60, 0x66, 0xce, 0xde, 0xfc, 0xb2, 0x0c, 0xd6, 0x9e, 0xa7,
	0x96, 0x63, 0x81, 0x04, 0x81, 0x2d, 0x50, 0x89, 0x91, 0xc7, 0x89, 0x70, 0xa2, 0xc0, 0x45, 0x82,
	0x38, 0xd4, 0xd5, 0xb5, 0x86, 0xd6, 0x2a, 0xd8, 0x1b, 0xa9, 0xfd, 0x54, 0x9a, 0x3b, 0x2e, 0x7c,
	0x03, 0x7e, 0x18, 0xe5, 0x75, 0x78, 0x82, 0xe5, 0xfa, 0x52, 0x23, 0xdf, 0x5a, 0x6d, 0xb7, 0x8d,
	0x0c, 0x05, 0x35, 0x0e, 0x14, 0x56, 0xd2, 0xee, 0xd7, 0xaf, 0x6e, 0x76, 0x72, 0x5f, 0x6f, 0x76,
	0xaa, 0x97, 0x68, 0xe8, 0xed, 0x35, 0xe7, 0x12, 0x37, 0xed, 0x0d, 0x3c, 0x1d, 0xce, 0xa1, 0x0d,
	0xd6, 0x23, 0xbf, 0xcb, 0x7c, 0x97, 0xfa, 0x3d, 0x87, 0x05, 0x5c, 0xcf, 0x4b, 0xea, 0x3f, 0x16,
	0x52, 0xc7, 0x96, 0x71, 0x3a, 0x02, 0xbc, 0x0c, 0xf6, 0x0b, 0x09, 0x9f, 0xbd, 0x16, 0x4d, 0x4c,
	0x1c, 0xbe, 0x05, 0xb5, 0xf9, 0xa3, 0x3b, 0x82, 0x39, 0x7d, 0x42, 0x7b, 0x7d, 0xa1, 0x17, 0x24,
	0xc1, 0xff, 0x99, 0xce, 0x76, 0x36, 0x53, 0xa9, 0x13, 0xf6, 0x42, 0xa6, 0x50, 0xa4, 0xd5, 0xf8,
	0x5e, 0x2f, 0x7c, 0xaf, 0x81, 0x1d, 0x1c, 0x92, 0x84, 0x78, 0x7c, 0xfc, 0x94, 0x27, 0x08, 0x59,
	0xc0, 0x38, 0xf2, 0xb8, 0xbe, 0x2c, 0x45, 0x3c, 0xcd, 0x56, 0x60, 0x99, 0x6b, 0x54, 0xe6, 0x83,
	0x24, 0xf8, 0x48, 0x25, 0x52, 0x4a, 0x7e, 0xc1, 0x8b, 0x43, 0x38, 0x7c, 0xa7, 0x81, 0x6d, 0x2e,
	0x58, 0xb0, 0x58, 0x4d, 0x51, 0xaa, 0x79, 0x92, 0x49, 0xcd, 0xb1, 0x60, 0xc1, 0x43, 0x5a, 0x6a,
	0x7c, 0x51, 0x00, 0x87, 0x1d, 0x50, 0x0c, 0x50, 0x88, 0x86, 0x5c, 0x5f, 0x69, 0x68, 0xad, 0xd5,
	0xf6, 0x9f, 0x99, 0x18, 0x8f, 0x24, 0x44, 0xa5, 0x57, 0x09, 0x9a, 0x1f, 0x0b, 0x60, 0x7d, 0xa6,
	0xf3, 0xe0, 0x16, 0x28, 0xa5, 0x89, 0x54, 0xa3, 0x97, 0xed, 0x15, 0xf9, 0xdf, 0x71, 0xe1, 0x36,
	0x00, 0xb8, 0x8f, 0x7c, 0x9f, 0x78, 0x89, 0x73, 0x49, 0x3a, 0xcb, 0xca, 0xd2, 0x71, 0xe1, 0xcf,
	0xa0, 0x8c, 0x3d, 0x4a, 0x7c, 0x91, 0x78, 0xf3, 0xd2, 0x5b, 0x4a, 0x0d, 0x1d, 0x17, 0xfe, 0x0e,
	0x36, 0xa8, 0x4f, 0x05, 0x45, 0xde, 0xa4, 0x81, 0x92, 0x29, 0x5a, 0x57, 0x56, 0x75, 0xe9, 0xff,
	0x81, 0x2d, 0x8f, 0xe1, 0x81, 0x33, 0xd5, 0xcc, 0xbe, 0x23, 0xe8, 0x90, 0xb0, 0x48, 0xe8, 0xcb,
	0x0d, 0xad, 0x55, 0xb2, 0xab, 0x49, 0xc0, 0xa4, 0x77, 0xfd, 0x93, 0xd4, 0x0b, 0xbb, 0xa0, 0x32,
	0xbe, 0x19, 0x35, 0xd4, 0x7a, 0x51, 0xd6, 0xc7, 0x5a, 0x58, 0x9f, 0xf1, 0xc2, 0x88, 0x2d, 0x63,
	0x7a, 0xec, 0x55, 0x95, 0xc6, 0x03, 0xad, 0x7c, 0x50, 0x80, 0x6a, 0x40, 0x52, 0x5d, 0x6a, 0x34,
	0x92, 0xe3, 0xf7, 0x48, 0x72, 0x13, 0xc9, 0xdd, 0xff, 0xfb, 0xd0, 0xbc, 0x9d, 0x21, 0x8f, 0xba,
	0x48, 0xb0, 0xf0, 0x98, 0x88, 0x03, 0x09, 0x3b, 0x42, 0x78, 0x40, 0xc4, 0x21, 0x12, 0x48, 0x11,
	0x6e, 0xaa, 0xec, 0xe9, 0xc0, 0xa4, 0x41, 0x1c, 0xee, 0x02, 0xc8, 0x3d, 0xc4, 0xfb, 0x8e, 0xcb,
	0x5e, 0xfb, 0x49, 0x31, 0x1c, 0x84, 0x07, 0x7a, 0xa9, 0x91, 0x6f, 0x95, 0xed, 0x8a, 0xf4, 0x1c,
	0x2a, 0xc7, 0x33, 0x3c, 0x80, 0x03, 0xf0, 0xd3, 0xcc, 0x2a, 0x70, 0xa8, 0xef, 0x92, 0x0b, 0xbd,
	0x2c, 0x05, 0xfe, 0x93, 0xa9, 0x55, 0xa6, 0x36, 0x43, 0x27, 0x01, 0x2b, 0x75, 0x3f, 0x4e, 0xaf,
	0x07, 0xe9, 0x68, 0xbe, 0x02, 0x95, 0xf9, 0xe0, 0x47, 0xac, 0xcc, 0x5d, 0x00, 0xa7, 0xa5, 0x2a,
	0xa5, 0xc9, 0xd6, 0x2c, 0xd8, 0x95, 0x68, 0x2e, 0x6f, 0xf3, 0x1c, 0x54, 0xef, 0x5f, 0x24, 0x8f,
	0x60, 0xac, 0x82, 0xa2, 0x6a, 0xbf, 0x25, 0xe9, 0x57, 0x7f, 0xfb, 0x27, 0x57, 0xb7, 0x75, 0xed,
	0xfa, 0xb6, 0xae, 0x7d, 0xbe, 0xad, 0x6b, 0x1f, 0xee, 0xea, 0xb9, 0xeb, 0xbb, 0x7a, 0xee, 0xd3,
	0x5d, 0x3d, 0x77, 0xbe, 0xd7, 0xa3, 0xa2, 0x1f, 0x75, 0x0d, 0xcc, 0x86, 0x26, 0x66, 0x7c, 0xc8,
	0xb8, 0x39, 0x29, 0xe1, 0x5f, 0xe3, 0x67, 0xe5, 0x62, 0xf6, 0x01, 0x13, 0x97, 0x01, 0xe1, 0xdd,
	0xa2, 0x7c, 0x54, 0xfe, 0xfe, 0x16, 0x00, 0x00, 0xff, 0xff, 0x89, 0xc9, 0xc0, 0xeb, 0x85, 0x07,
	0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.StopConsumerChainProposals) > 0 {
		for iNdEx := len(m.StopConsumerChainProposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StopConsumerChainProposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.CreateConsumerChainProposals) > 0 {
		for iNdEx := len(m.CreateConsumerChainProposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreateConsumerChainProposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ValsetUpdateIdToHeight) > 0 {
		for iNdEx := len(m.ValsetUpdateIdToHeight) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValsetUpdateIdToHeight[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.UnbondingOps) > 0 {
		for iNdEx := len(m.UnbondingOps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingOps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ConsumerStates) > 0 {
		for iNdEx := len(m.ConsumerStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConsumerStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ValsetUpdateId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ValsetUpdateId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbondingOpsIndex) > 0 {
		for iNdEx := len(m.UnbondingOpsIndex) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingOpsIndex[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.SlashDowntimeAck) > 0 {
		for iNdEx := len(m.SlashDowntimeAck) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SlashDowntimeAck[iNdEx])
			copy(dAtA[i:], m.SlashDowntimeAck[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.SlashDowntimeAck[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.PendingValsetChanges) > 0 {
		for iNdEx := len(m.PendingValsetChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingValsetChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size, err := m.ConsumerGenesis.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.LockUnbondingOnTimeout {
		i--
		if m.LockUnbondingOnTimeout {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.InitialHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.InitialHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingOpIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingOpIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingOpIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbondingOpIndex) > 0 {
		dAtA4 := make([]byte, len(m.UnbondingOpIndex)*10)
		var j3 int
		for _, num := range m.UnbondingOpIndex {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintGenesis(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.ValsetUpdateId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ValsetUpdateId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValsetUpdateIdToHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValsetUpdateIdToHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValsetUpdateIdToHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.ValsetUpdateId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ValsetUpdateId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValsetUpdateId != 0 {
		n += 1 + sovGenesis(uint64(m.ValsetUpdateId))
	}
	if len(m.ConsumerStates) > 0 {
		for _, e := range m.ConsumerStates {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbondingOps) > 0 {
		for _, e := range m.UnbondingOps {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ValsetUpdateIdToHeight) > 0 {
		for _, e := range m.ValsetUpdateIdToHeight {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CreateConsumerChainProposals) > 0 {
		for _, e := range m.CreateConsumerChainProposals {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.StopConsumerChainProposals) > 0 {
		for _, e := range m.StopConsumerChainProposals {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *ConsumerState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.InitialHeight != 0 {
		n += 1 + sovGenesis(uint64(m.InitialHeight))
	}
	if m.LockUnbondingOnTimeout {
		n += 2
	}
	l = m.ConsumerGenesis.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.PendingValsetChanges) > 0 {
		for _, e := range m.PendingValsetChanges {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SlashDowntimeAck) > 0 {
		for _, s := range m.SlashDowntimeAck {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbondingOpsIndex) > 0 {
		for _, e := range m.UnbondingOpsIndex {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *UnbondingOpIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValsetUpdateId != 0 {
		n += 1 + sovGenesis(uint64(m.ValsetUpdateId))
	}
	if len(m.UnbondingOpIndex) > 0 {
		l = 0
		for _, e := range m.UnbondingOpIndex {
			l += sovGenesis(uint64(e))
		}
		n += 1 + sovGenesis(uint64(l)) + l
	}
	return n
}

func (m *ValsetUpdateIdToHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValsetUpdateId != 0 {
		n += 1 + sovGenesis(uint64(m.ValsetUpdateId))
	}
	if m.Height != 0 {
		n += 1 + sovGenesis(uint64(m.Height))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetUpdateId", wireType)
			}
			m.ValsetUpdateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetUpdateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerStates = append(m.ConsumerStates, ConsumerState{})
			if err := m.ConsumerStates[len(m.ConsumerStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingOps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingOps = append(m.UnbondingOps, types.UnbondingOp{})
			if err := m.UnbondingOps[len(m.UnbondingOps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetUpdateIdToHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValsetUpdateIdToHeight = append(m.ValsetUpdateIdToHeight, ValsetUpdateIdToHeight{})
			if err := m.ValsetUpdateIdToHeight[len(m.ValsetUpdateIdToHeight)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateConsumerChainProposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateConsumerChainProposals = append(m.CreateConsumerChainProposals, CreateConsumerChainProposal{})
			if err := m.CreateConsumerChainProposals[len(m.CreateConsumerChainProposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopConsumerChainProposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StopConsumerChainProposals = append(m.StopConsumerChainProposals, StopConsumerChainProposal{})
			if err := m.StopConsumerChainProposals[len(m.StopConsumerChainProposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialHeight", wireType)
			}
			m.InitialHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockUnbondingOnTimeout", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LockUnbondingOnTimeout = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerGenesis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsumerGenesis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingValsetChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingValsetChanges = append(m.PendingValsetChanges, types.ValidatorSetChangePacketData{})
			if err := m.PendingValsetChanges[len(m.PendingValsetChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashDowntimeAck", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashDowntimeAck = append(m.SlashDowntimeAck, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingOpsIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingOpsIndex = append(m.UnbondingOpsIndex, UnbondingOpIndex{})
			if err := m.UnbondingOpsIndex[len(m.UnbondingOpsIndex)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingOpIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingOpIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingOpIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetUpdateId", wireType)
			}
			m.ValsetUpdateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetUpdateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnbondingOpIndex = append(m.UnbondingOpIndex, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenesis
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenesis
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UnbondingOpIndex) == 0 {
					m.UnbondingOpIndex = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnbondingOpIndex = append(m.UnbondingOpIndex, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingOpIndex", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValsetUpdateIdToHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValsetUpdateIdToHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValsetUpdateIdToHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetUpdateId", wireType)
			}
			m.ValsetUpdateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetUpdateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
