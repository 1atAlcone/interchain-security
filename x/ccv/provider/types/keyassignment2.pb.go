// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_security/ccv/provider/v1/keyassignment2.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	crypto "github.com/tendermint/tendermint/proto/tendermint/crypto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PendingKeyAssignment struct {
	ConsumerKey *crypto.PublicKey `protobuf:"bytes,1,opt,name=consumer_key,json=consumerKey,proto3" json:"consumer_key,omitempty"`
	Power       int64             `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *PendingKeyAssignment) Reset()         { *m = PendingKeyAssignment{} }
func (m *PendingKeyAssignment) String() string { return proto.CompactTextString(m) }
func (*PendingKeyAssignment) ProtoMessage()    {}
func (*PendingKeyAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_d213c3a5b98e7913, []int{0}
}
func (m *PendingKeyAssignment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingKeyAssignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingKeyAssignment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingKeyAssignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingKeyAssignment.Merge(m, src)
}
func (m *PendingKeyAssignment) XXX_Size() int {
	return m.Size()
}
func (m *PendingKeyAssignment) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingKeyAssignment.DiscardUnknown(m)
}

var xxx_messageInfo_PendingKeyAssignment proto.InternalMessageInfo

func (m *PendingKeyAssignment) GetConsumerKey() *crypto.PublicKey {
	if m != nil {
		return m.ConsumerKey
	}
	return nil
}

func (m *PendingKeyAssignment) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

type ConsumerAddrsToPrune struct {
	ConsumerAddrs [][]byte `protobuf:"bytes,1,rep,name=consumer_addrs,json=consumerAddrs,proto3" json:"consumer_addrs,omitempty"`
}

func (m *ConsumerAddrsToPrune) Reset()         { *m = ConsumerAddrsToPrune{} }
func (m *ConsumerAddrsToPrune) String() string { return proto.CompactTextString(m) }
func (*ConsumerAddrsToPrune) ProtoMessage()    {}
func (*ConsumerAddrsToPrune) Descriptor() ([]byte, []int) {
	return fileDescriptor_d213c3a5b98e7913, []int{1}
}
func (m *ConsumerAddrsToPrune) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerAddrsToPrune) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerAddrsToPrune.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerAddrsToPrune) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerAddrsToPrune.Merge(m, src)
}
func (m *ConsumerAddrsToPrune) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerAddrsToPrune) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerAddrsToPrune.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerAddrsToPrune proto.InternalMessageInfo

func (m *ConsumerAddrsToPrune) GetConsumerAddrs() [][]byte {
	if m != nil {
		return m.ConsumerAddrs
	}
	return nil
}

func init() {
	proto.RegisterType((*PendingKeyAssignment)(nil), "interchain_security.ccv.provider.v1.PendingKeyAssignment")
	proto.RegisterType((*ConsumerAddrsToPrune)(nil), "interchain_security.ccv.provider.v1.ConsumerAddrsToPrune")
}

func init() {
	proto.RegisterFile("interchain_security/ccv/provider/v1/keyassignment2.proto", fileDescriptor_d213c3a5b98e7913)
}

var fileDescriptor_d213c3a5b98e7913 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0x02, 0x41,
	0x18, 0x86, 0x9d, 0xa4, 0x0e, 0xab, 0x75, 0x58, 0xf6, 0x20, 0x22, 0x8b, 0x18, 0x81, 0x97, 0x66,
	0xd0, 0x2e, 0x11, 0x44, 0x58, 0x47, 0x2f, 0x22, 0x9e, 0xba, 0x88, 0x7e, 0xfb, 0xb1, 0x0e, 0x36,
	0xf3, 0x2d, 0x33, 0xb3, 0x5b, 0xf3, 0x2f, 0xfa, 0x59, 0x1d, 0x3d, 0x76, 0x0c, 0xfd, 0x23, 0xa1,
	0x9b, 0x5a, 0xd0, 0x6d, 0x86, 0xef, 0x7d, 0xde, 0x17, 0x9e, 0xe0, 0x56, 0x6a, 0x87, 0x06, 0x16,
	0x33, 0xa9, 0xa7, 0x16, 0x21, 0x37, 0xd2, 0x79, 0x01, 0x50, 0x88, 0xcc, 0x50, 0x21, 0x13, 0x34,
	0xa2, 0xe8, 0x89, 0x25, 0xfa, 0x99, 0xb5, 0x32, 0xd5, 0x0a, 0xb5, 0xeb, 0xf3, 0xcc, 0x90, 0xa3,
	0xf0, 0xf2, 0x1f, 0x92, 0x03, 0x14, 0x7c, 0x4f, 0xf2, 0xa2, 0xd7, 0x8c, 0x52, 0x4a, 0x69, 0x97,
	0x17, 0xdb, 0x57, 0x89, 0x36, 0x5b, 0x0e, 0x75, 0x82, 0x46, 0x49, 0xed, 0x04, 0x18, 0x9f, 0x39,
	0xda, 0x4e, 0xd8, 0xf2, 0xda, 0x51, 0x41, 0x34, 0x42, 0x9d, 0x48, 0x9d, 0x0e, 0xd1, 0x0f, 0x0e,
	0xbb, 0xe1, 0x43, 0x50, 0x07, 0xd2, 0x36, 0x57, 0x68, 0xa6, 0x4b, 0xf4, 0x0d, 0xd6, 0x66, 0xdd,
	0x5a, 0xbf, 0xc5, 0x8f, 0x65, 0xbc, 0x2c, 0xe3, 0xa3, 0x7c, 0xfe, 0x22, 0x61, 0x88, 0x7e, 0x5c,
	0xdb, 0x13, 0x43, 0xf4, 0x61, 0x14, 0x9c, 0x66, 0xf4, 0x8a, 0xa6, 0x71, 0xd2, 0x66, 0xdd, 0xea,
	0xb8, 0xfc, 0x74, 0xee, 0x83, 0xe8, 0xe9, 0x27, 0x34, 0x48, 0x12, 0x63, 0x27, 0x34, 0x32, 0xb9,
	0xc6, 0xf0, 0x2a, 0xb8, 0x38, 0xcc, 0xcd, 0xb6, 0x87, 0x06, 0x6b, 0x57, 0xbb, 0xf5, 0xf1, 0x39,
	0xfc, 0x4e, 0x3f, 0x4e, 0x3e, 0xd6, 0x31, 0x5b, 0xad, 0x63, 0xf6, 0xb5, 0x8e, 0xd9, 0xfb, 0x26,
	0xae, 0xac, 0x36, 0x71, 0xe5, 0x73, 0x13, 0x57, 0x9e, 0xef, 0x52, 0xe9, 0x16, 0xf9, 0x9c, 0x03,
	0x29, 0x01, 0x64, 0x15, 0x59, 0x71, 0x54, 0x76, 0x7d, 0x90, 0xfd, 0xf6, 0x57, 0xb7, 0xf3, 0x19,
	0xda, 0xf9, 0xd9, 0x4e, 0xc5, 0xcd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x08, 0xc6, 0x0a, 0xfe,
	0x9f, 0x01, 0x00, 0x00,
}

func (m *PendingKeyAssignment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingKeyAssignment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingKeyAssignment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintKeyassignment2(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if m.ConsumerKey != nil {
		{
			size, err := m.ConsumerKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeyassignment2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerAddrsToPrune) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerAddrsToPrune) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerAddrsToPrune) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerAddrs) > 0 {
		for iNdEx := len(m.ConsumerAddrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ConsumerAddrs[iNdEx])
			copy(dAtA[i:], m.ConsumerAddrs[iNdEx])
			i = encodeVarintKeyassignment2(dAtA, i, uint64(len(m.ConsumerAddrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeyassignment2(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeyassignment2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PendingKeyAssignment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConsumerKey != nil {
		l = m.ConsumerKey.Size()
		n += 1 + l + sovKeyassignment2(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovKeyassignment2(uint64(m.Power))
	}
	return n
}

func (m *ConsumerAddrsToPrune) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConsumerAddrs) > 0 {
		for _, b := range m.ConsumerAddrs {
			l = len(b)
			n += 1 + l + sovKeyassignment2(uint64(l))
		}
	}
	return n
}

func sovKeyassignment2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeyassignment2(x uint64) (n int) {
	return sovKeyassignment2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PendingKeyAssignment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyassignment2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingKeyAssignment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingKeyAssignment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyassignment2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsumerKey == nil {
				m.ConsumerKey = &crypto.PublicKey{}
			}
			if err := m.ConsumerKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeyassignment2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyassignment2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerAddrsToPrune) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyassignment2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerAddrsToPrune: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerAddrsToPrune: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerAddrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyassignment2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyassignment2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyassignment2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerAddrs = append(m.ConsumerAddrs, make([]byte, postIndex-iNdEx))
			copy(m.ConsumerAddrs[len(m.ConsumerAddrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyassignment2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyassignment2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeyassignment2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeyassignment2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeyassignment2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeyassignment2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeyassignment2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeyassignment2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeyassignment2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeyassignment2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeyassignment2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeyassignment2 = fmt.Errorf("proto: unexpected end of group")
)
